#pragma once

/*
* @file MessageUClient.h
* @author Ido Abramov
*/

#include "Definitions.h"
#include "Client.h"
#include "Request.h"
#include "Response.h"
#include "Message.h"
#include "Utils.h"
#include "ServerCommunication.h"

/*
* @class MessageUClient
* Contains the program flow and user requests handlers.
* 
* Using CryptoPP library for Encryption algorithms.
* Encryption/Decryption by public and private key refers to RSA.
* Encryption/Decryption by symmetric key refers to AES.
*/
namespace MessageUClient
{
	/*
	* function which prints instructions for using the program.
	*/
	static void printInstructions();

	/*
	* @summary Sets the client a username (which the client input).
	* Also creating a private key and public key (RSA) for the client.
	* Sending the server a register request which contains client's username and public key.
	* Receiving success response if registeration completed, otherwise server general error.
	* Also receiving a new UUID generated by the server and sets it to the client's data.
	* Saving the client's data in the file path - CLIENT_INFO_FILE_PATH (check "defintions.h")
	* 
	* @param client - the current client.
	*/
	void registerHandlder(Client* client);

	/*
	* @summary Sending the server request to get all server's registered clients.
	* Receiving success response if the client list received, otherwise server general error.
	* Saving each new client from the list into the current client's list of contacts (by their UUID).
	* Prints the clients list, each client printed with its UUID (hexadecimal) and username.
	* 
	* @param client - the current client.
	*/
	void getClientsListHandler(Client* client);


	/*
	* @summary Sending the server a request to get other client's public key.
	* Receiving success response if the client is found and the public key received, otherwise server general error.
	* Sets the target client's public key in the list of contacts of the current client.
	* 
	* @param client - the current client.
	*/
	void getPublicKeyHandler(Client* client);

	
	/*
	* @summary Sending the server a request to get all waiting messages of the current client.
	* Receiving success response if the waiting messages pulled back successfuly, otherwise server general error.
	* Prints the messages one by one, after decrypting them.
	*
	* @param client - the current client.
	*/
	void getWaitingMessagesHandler(Client* client);

	
	/*
	* @summary Sending the server a encrypted text message (by symmetric key) to other client.
	* Receicing success response if the text message saved in the server successfuly.
	* The client sends the message to a client in its contacts list, if not exists - prints error.
	* Message is encrypted by the symmetric key of the target client, if there is no symmetric key - prints error.
	* 
	* @param client - the current client.
	*/
	void sendTextMessagesHandler(Client* client);

	
	/*
	* @summary Sending the server a request for client's symmetric key.
	* Receiving success response if the message sved in the server successfuly.
	* The client sends the message to a client in its contacts list, if not exists - prints error.
	* 
	* @param client - the current client.
	*/
	void askForSymmetricKeyHandler(Client* client);

	
	/*
	* @summary Sending the server a new generated symmetric key for target client.
	* Receiving success response if the message sved in the server successfuly.
	* The client creates new symmetric key and sets it to the target client's data in the contacts list of the current client.
	* The client sends the message to a client in its contacts list, if not exists - prints error.
	* Message is encrypted by the public key of the target client, if there is no public key - prints error.
	* 
	* @param client - the current client.
	*/
	void sendSymmetricKeyHandler(Client* client);

	
	/*
	* @summary Sending the server a encrypted text file (by symmetric key) to other client.
	* Receicing success response if the text file saved in the server successfuly.
	* The client sends the file to a client in its contacts list, if not exists - prints error.
	* File is encrypted by the symmetric key of the target client, if there is no symmetric key - prints error.
	* The file saved in the user's current working directory with a random name.
	*/
	void sendTextFileHandler(Client* client);

	
	/*
	* The main function which controls the flow of the program.
	* Gets the user command input and preforms the matching handler.
	*/
	void start();
};
